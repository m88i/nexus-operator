name: Nexus Operator Integration Checks
on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - "examples/**"
      - "LICENSE"
      - "LICENSE_NOTICE"
      - "Makefile"
      - ".github/ISSUE_TEMPLATE/**"
    branches:
      - master
env:
  OPERATOR_SDK_VERSION: v0.18.1
  GO_VERSION: 1.14
jobs:
  golint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.27
          args: --enable=golint --timeout=2m

  unit_test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go

      - name: Check out code
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod/cache
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Mod Tidy
        run: |
          go mod tidy

      - name: FMT
        run: gofmt -s -l -w cmd/ pkg/ version/

      - name: Vet
        run: go vet ./...

      - name: Test Packages
        run: go test ./pkg/... -count=1 -coverprofile=coverage.txt -covermode=atomic
      - name: Validate codcov yaml file
        run: curl -vvv --data-binary @codecov.yml https://codecov.io/validate
      - name: Send Coverage Report
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.txt
          flags: operator
          name: operator-test
          fail_ci_if_error: true

  integration_tests:
    name: Integration Tests
    # we should wait for an ok from the other two
    needs: [golint, unit_test]
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: operator-test
      KIND_VERSION: v0.8.1
      CREATE_NAMESPACE: false
      NAMESPACE_E2E: default
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
        id: go
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod/cache
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache-

      - name: Cache Binaries
        uses: actions/cache@v1
        with:
          path: ~/go/bin/
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}

      - name: Install Operator SDK
        run: |
          ./hack/ci/install-operator-sdk.sh

      - name: Install KIND
        run: |
          ./hack/ci/install-kind.sh
          echo "::add-path::$GITHUB_WORKSPACE/bin"

      - name: Start KIND
        run: ./hack/ci/start-kind.sh

      - name: Generate Manifests
        run: ./hack/generate-manifests.sh

      - name: Build Operator Image
        env:
          BUILDER: docker
          CUSTOM_BASE_IMAGE: alpine:latest
        run: |
          ./hack/go-build.sh

      - name: Load Operator Image
        run: ./hack/ci/load-operator-image.sh

      - name: Run e2e test
        env:
          RUN_WITH_IMAGE: true
          TIMEOUT_E2E: 20m
          ADDITIONAL_FLAGS: "-coverprofile=coverage_e2e.txt -covermode=atomic"
        run: ./hack/run-e2e-test.sh

      - name: Send Coverage Report
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage_e2e.txt
          flags: operator-e2e
          name: operator-e2e-test
          fail_ci_if_error: false

      - name: Run Operator OLM Integration Test
        run: ./hack/ci/operator-olm-test.sh
